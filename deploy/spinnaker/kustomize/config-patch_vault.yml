apiVersion: spinnaker.armory.io/v1alpha2
kind: SpinnakerService
metadata:
  name: spinnaker
spec:
  # spec.spinnakerConfig - This section is how to specify configuration spinnaker
  spinnakerConfig:
  # spec.spinnakerConfig.config - This section contains the contents of a deployment found in a halconfig .deploymentConfigurations[0]
    config:
      version: 2.27.3  # the version of Spinnaker to be deployed
      artifacts:
        gitrepo:
          enabled: true
          accounts:
            - name: AT_GitRepo
              username: ChristineZhaoArmory                # Git username.
              token: encrypted:k8s!n:spin-secrets!k:github-token
        github:
          enabled: true
          accounts:
            - name: AT_Github
              username: ChristineZhaoArmory                # Git username.
              token: encrypted:k8s!n:spin-secrets!k:github-token
        # christine- 2022-06-13 have problem. Need check later
        s3:
          enabled: true
          accounts:
          - name: AT_S3
            region: us-east-2
          - name: us_east_1_S3
            region: us-east-1
        #     awsAccessKeyId: ASIA3ZQRIGO2LOT4OUGH
        #     awsSecretAccessKey: encrypted:k8s!n:spin-secrets!k:aws-secret-key
      persistentStorage:
        persistentStoreType: s3
        s3:
          bucket: christine-zhao-s3
          rootFolder: front50
          region: us-east-2
      armory:
        secrets:
          vault:
            enabled: true
            authMethod: KUBERNETES   # Method used to authenticate with the Vault endpoint. Must be either KUBERNETES for Kubernetes service account auth or TOKEN for Vault token auth. The TOKEN method will require a VAULT_TOKEN environment variable set for Operator and the services.  
            url:  http://10.100.146.32:8200
            role: dtag # (Applies to KUBERNETES authentication method) Name of the role against which the login is being attempted.
            path: dtag # <k8s cluster path> (Optional; default: kubernetes) Applies to KUBERNETES authentication method) Path of the kubernetes authentication backend mount. Default is "kubernetes"
      security:
        apiSecurity:
          overrideBaseUrl: https://christine-spin-gate.tse-armory.io  # Specify your DNS name for Gate with https scheme
        uiSecurity:
          overrideBaseUrl: https://christine-spin-deck.tse-armory.io       # Specify your DNS name for Deck with https scheme
        authn:
          oauth2:
            enabled: true
            client:
              clientId: f074440fd5b990f4aca0
              clientSecret: encrypted:s3!r:us-east-2!b:christine-zhao-s3!f:secret/spinnaker-secrets.yml!k:github.token
              userAuthorizationUri: https://github.com/login/oauth/authorize
              scope: user:org,user:email
              preEstablishedRedirectUri: https://christine-spin-gate.tse-armory.io/login
            provider: GITHUB
      providers:
        kubernetes:
          enabled: true
          accounts:
          - name: dtag # Testing SUPPORT VAULT
            #name: christine-sa # Temporary change
            requiredGroupMembership: []
            providerVersion: V2
            permissions: {}
            dockerRegistries: []
            configureImagePullSecrets: true
            cacheThreads: 1
            namespaces: []
            omitNamespaces: []
            kinds: []
            omitKinds: []
            customResources: []
            cachingPolicies: []
            oAuthScopes: []
            onlySpinnakerManaged: true
            #kubeconfigFile: encryptedFile:secrets-manager!r:us-east-2!s:kubeconfig-secret1  # This secrets-manager
            kubeconfigFile: encrypted:vault!e:secret!p:dtag/kubernetes!k:config # This is vault 
                           #encrypted:vault!e:secret!p:spinnaker/$SECRET_NAME!k:$SECRET_KEY
          #primaryAccount: christine-sa # Temporary change
          primaryAccount: dtag # Testing SUPPORT VAULT
        aws:
          accounts:
          - accountId: ‘810711266228’
            providerVersion: V1
            name: christine-aws
            regions:
            - name: us-east-2
            - name: us-east-1
            - name: us-west-1
            - name: us-west-2
            assumeRole: role/aws-spin-support-managedrole
            requiredGroupMembership: []
          bakeryDefaults:
            baseImages:
            - baseImage:
                detailedDescription: debian11
                id: debian
                shortDescription: v11
                packageType: deb
                templateFile: aws-ebs.json
              virtualizationSettings:
              - instanceType: t2.micro
                region: us-west-2
                # sourceAmi: ami-0d70546e43a941d70 #ubuntu
                sourceAmi: ami-071e6cafc48327ca2
                spotPrice: “0”
                spotPriceAutoProduct: Linux/UNIX (Amazon VPC)
                sshUserName: admin
                virtualizationType: hvm
          defaultKeyPairTemplate: ‘{{“{{“}}name{{“}}“}}-keypair’
          defaultRegions:
          - name: us-east-1
          - name: us-east-2
          - name: us-west-1
          - name: us-west-2
          defaults:
            iamRole: BaseIAMRole
          enabled: true
          features:
            cloudFormation:
              enabled: true
          primaryAccount: christine-aws
      deploymentEnvironment:
        customSizing:
          echo:
            limits:
              cpu: 250m
            # memory: 512Mi
            # requests:
            #   cpu: 100m
            #   memory: 128Mi
          spin-clouddriver:
            sreplicas: 2
            limits:
              # cpu: 600m
            #  memory: 3Gi
            # requests:
            #   cpu: 250m
            #   memory: 512Mi
          clouddriver:
            limits:
              # cpu: 801m
            #  memory: 2Gi
            # requests:
            #   cpu: 250m
            #   memory: 512Mi
      armory:
        terraform:
          enabled: true

        # christine- 2022-05-31 below is enable diagnostics and logging
        # https://docs.armory.io/armory-enterprise/armory-admin/observe/diagnostics-configure/
        # diagnostics:
        #   enabled:    true
        #   uuid:       dedfcc38-9b15-402f-8292-2e795ba1ffc3 # Enter uniquely Generated UUID
        #   logging:
        #     enabled:    true # true/false to enable
        #     endpoint:   https://debug.armory.io/v1/logs # Enter Endpoint, e.g. https://debug.armory.io/v1/logs
        # christine- 2022-05-31 above is enable diagnostics and logging