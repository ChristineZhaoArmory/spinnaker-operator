#-----------------------------------------------------------------------------------------------------------------
# Example configuration for exposing spinnaker with an ingress object implemented by nginx.
#-----------------------------------------------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spin-ingress
  labels:
    app: spin
    cluster: spin-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"                    # If the cluster has multiple ingress controllers installed, indicate which implementation to use
    # All nginx ingress annotations: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:                                # (Optional section). Only needed if SSL termination will be done by nginx controller. SSL termination can also be done at load balancer level (i.e. for AWS using ACM certificates: https://kubernetes.github.io/ingress-nginx/deploy/#tls-termination-in-aws-load-balancer-elb)
    - hosts:
      - christine-spin-deck.tse-armory.io       # Public facing spinnaker domain
      secretName: tls-secret          # There must be a secret with this name in the namespace where spinnaker is installed, of type "kubernetes.io/tls". Otherwise a self-signed certificate is used.
  rules:
    # - host: christine-spin-deck.tse-armory.io   # Public facing spinnaker domain
    #   http:
    #     paths:
    #       - backend:
    #           serviceName: spin-deck
    #           servicePort: 9000
    #         path: /
    # - host: christine-spin-deck.tse-armory.io   # Public facing spinnaker domain
    #   http:
    #     paths:
    #       - backend:
    #           serviceName: spin-gate
    #           servicePort: 8084
    #         path: /api
    # - host: christine-spin-deck.tse-armory.io   # Public facing spinnaker domain
    #   http:
    #     paths:
    #       - backend:
    #           serviceName: spin-clouddriver-grpc
    #           servicePort: 9091
    #         path: /spin-clouddriver-grpc

    # 2023-01-06 error: error validating "STDIN": error validating data: [ValidationError(Ingress.spec.rules[0].http.paths[0].backend): unknown field "serviceName" in io.k8s.api.networking.v1.IngressBackend, ValidationError(Ingress.spec.rules[0].http.paths[0].backend): unknown field "servicePort" in io.k8s.api.networking.v1.IngressBackend]; if you choose to ignore these errors, turn validation off with --validate=false

    - host: christine-spin-deck.tse-armory.io 
      http:
        paths:
        - path: /spin-clouddriver-grpc(/|$)(.*)
          pathType: Prefix
          backend:
            service:
              name: spin-clouddriver-grpc
              port:
                number: 9091